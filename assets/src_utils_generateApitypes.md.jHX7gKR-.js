import{e,r as t,f as r,h as n,j as i,v as s,q as p,t as a,_ as o,O as y,k as c,M as d,u as l,I as g}from"./chunks/framework.CU_KtCqm.js";import{Q as u}from"./chunks/index.CHJFlLQL.js";const m=JSON.parse('{"errcode":0,"errmsg":"成功！","data":{"query_path":{"path":"/workbeanches/live-review/review-detail","params":[]},"edit_uid":0,"status":"done","type":"static","req_body_is_json_schema":false,"res_body_is_json_schema":true,"api_opened":false,"index":0,"req_body_other":"{}","tag":[],"_id":27198,"res_body":"{\\"type\\":\\"object\\",\\"properties\\":{\\"code\\":{\\"type\\":\\"integer\\"},\\"message\\":{\\"type\\":\\"string\\"},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"title\\":{\\"type\\":\\"string\\"},\\"sceneType\\":{\\"type\\":\\"integer\\"},\\"startAt\\":{\\"type\\":\\"string\\",\\"description\\":\\"开始时间\\"},\\"finishAt\\":{\\"type\\":\\"string\\",\\"description\\":\\"结束时间\\"},\\"duration\\":{\\"type\\":\\"string\\",\\"description\\":\\"视频时长\\"},\\"coverUrl\\":{\\"type\\":\\"string\\"},\\"playVo\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"mp4\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}},\\"hls\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}}}},\\"videoShowVOS\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"title\\":{\\"type\\":\\"string\\"},\\"saveType\\":{\\"type\\":\\"integer\\"},\\"duration\\":{\\"type\\":\\"integer\\"},\\"fileFormat\\":{\\"type\\":\\"string\\"},\\"videoUrl\\":{\\"type\\":\\"string\\"}}},\\"description\\":\\"原片和合成片合集\\"},\\"liveSpeakerVOS\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"liveId\\":{\\"type\\":\\"string\\"},\\"productTagName\\":{\\"type\\":\\"string\\"},\\"orgGrade\\":{\\"type\\":\\"string\\"},\\"platformGrade\\":{\\"type\\":\\"string\\"},\\"titleCertifyImgVo\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"imageName\\":{\\"type\\":\\"string\\"},\\"normal\\":{\\"type\\":\\"string\\"},\\"middle\\":{\\"type\\":\\"string\\"},\\"small\\":{\\"type\\":\\"string\\"},\\"gif\\":{\\"type\\":\\"string\\"},\\"nologo\\":{\\"type\\":\\"string\\"}}},\\"doctorId\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\"},\\"titleName\\":{\\"type\\":\\"string\\"},\\"hospital\\":{\\"type\\":\\"string\\"},\\"fee\\":{\\"type\\":\\"number\\"},\\"reviewStatus\\":{\\"type\\":\\"integer\\"},\\"firstPushAt\\":{\\"type\\":\\"string\\"},\\"lastCutOffAt\\":{\\"type\\":\\"string\\"},\\"remark\\":{\\"type\\":\\"string\\"},\\"isAllowManualFee\\":{\\"type\\":\\"boolean\\"},\\"department\\":{\\"type\\":\\"string\\"}}},\\"description\\":\\"讲者列表\\"},\\"orgName\\":{\\"type\\":\\"string\\",\\"description\\":\\"组织名称\\"},\\"remark\\":{\\"type\\":\\"string\\",\\"description\\":\\"备注\\"},\\"liveExceptionList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"},\\"description\\":\\"审核直播异常项\\"},\\"idCardNo\\":{\\"type\\":\\"string\\",\\"description\\":\\"身份证\\"},\\"age\\":{\\"type\\":\\"integer\\",\\"description\\":\\"年龄\\"},\\"faceRecordImg\\":{\\"type\\":\\"string\\",\\"description\\":\\"实名认证照片\\"},\\"complianceLivePushVOList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"complianceType\\":{\\"type\\":\\"integer\\"},\\"isCompliance\\":{\\"type\\":\\"boolean\\"},\\"livePushList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"liveId\\":{\\"type\\":\\"string\\"},\\"sceneType\\":{\\"type\\":\\"integer\\"},\\"title\\":{\\"type\\":\\"string\\"},\\"pushAt\\":{\\"type\\":\\"string\\"},\\"cutOffAt\\":{\\"type\\":\\"string\\"},\\"reviewStatus\\":{\\"type\\":\\"integer\\"},\\"playVo\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"mp4\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}},\\"hls\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}}}},\\"titleName\\":{\\"type\\":\\"string\\"}}}}}},\\"description\\":\\"合规推流场次列表\\"},\\"sameTimeNotValidPushList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"liveId\\":{\\"type\\":\\"string\\"},\\"sceneType\\":{\\"type\\":\\"integer\\"},\\"title\\":{\\"type\\":\\"string\\"},\\"pushAt\\":{\\"type\\":\\"string\\"},\\"cutOffAt\\":{\\"type\\":\\"string\\"},\\"reviewStatus\\":{\\"type\\":\\"integer\\"},\\"playVo\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"mp4\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}},\\"hls\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"sd\\":{\\"type\\":\\"string\\"},\\"hd\\":{\\"type\\":\\"string\\"}}}}},\\"titleName\\":{\\"type\\":\\"string\\"}}},\\"description\\":\\"同时直播多场违规列表\\"},\\"controlType\\":{\\"type\\":\\"integer\\",\\"description\\":\\"公司管控： 0  单产品线管控 :1\\"},\\"controlContent\\":{\\"type\\":\\"string\\",\\"description\\":\\"管控内容\\"},\\"dayHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者该讲者通过审核单日场次\\",\\"default\\":\\"0\\"},\\"monthHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者通过审核单月场次\\",\\"default\\":\\"0\\"},\\"yearHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者通过审核年场次\\",\\"default\\":\\"0\\"},\\"maxDayHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者该讲者通过审核最多单日场次\\",\\"default\\":\\"0\\"},\\"maxMonthHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者通过审核最多单月场次\\",\\"default\\":\\"0\\"},\\"maxYearHighest\\":{\\"type\\":\\"integer\\",\\"description\\":\\"该讲者通过审核最多年场次\\",\\"default\\":\\"0\\"},\\"dayCountFlag\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"日场次合规\\",\\"default\\":\\"false\\"},\\"monthCountFlag\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"月场次合规\\",\\"default\\":\\"false\\"},\\"exceptionFlag\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"直播是否存在异常\\",\\"default\\":\\"false\\"},\\"isExamine\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"当前用户可审核\\",\\"default\\":\\"false\\"},\\"isLeader\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"当前用户是否领导\\",\\"default\\":\\"false\\"},\\"reviewerId\\":{\\"type\\":\\"string\\",\\"description\\":\\"工单审核人id\\"},\\"reviewerName\\":{\\"type\\":\\"string\\",\\"description\\":\\"工单审核人姓名\\"},\\"liveSpeakerModifyRecordList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核记录id\\"},\\"liveId\\":{\\"type\\":\\"string\\",\\"description\\":\\"直播ID\\"},\\"userId\\":{\\"type\\":\\"string\\",\\"description\\":\\"用户ID\\"},\\"liveSpeakerId\\":{\\"type\\":\\"string\\",\\"description\\":\\"讲者审核ID\\"},\\"liveCoursewareId\\":{\\"type\\":\\"string\\",\\"description\\":\\"课件Id\\"},\\"submitTime\\":{\\"type\\":\\"string\\",\\"description\\":\\"提交时间\\"},\\"submitUserId\\":{\\"type\\":\\"string\\",\\"description\\":\\"提交人ID\\"},\\"reviewType\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核类型 1视频 2课件\\"},\\"reviewMethod\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核方式 1人工审核 2系统审核\\"},\\"reviewTime\\":{\\"type\\":\\"string\\",\\"description\\":\\"审核时间\\"},\\"reviewUserId\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核人ID\\"},\\"reviewUserName\\":{\\"type\\":\\"string\\",\\"description\\":\\"审核人名称\\"},\\"reviewStatus\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核状态\\"},\\"reviewRemark\\":{\\"type\\":\\"string\\",\\"description\\":\\"失败原因\\"}}},\\"description\\":\\"历史审核记录\\"},\\"liveSpeakerCoursewareReviewRecordList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核记录id\\"},\\"liveId\\":{\\"type\\":\\"string\\",\\"description\\":\\"直播ID\\"},\\"userId\\":{\\"type\\":\\"string\\",\\"description\\":\\"用户ID\\"},\\"liveSpeakerId\\":{\\"type\\":\\"string\\",\\"description\\":\\"讲者审核ID\\"},\\"liveCoursewareId\\":{\\"type\\":\\"string\\",\\"description\\":\\"课件Id\\"},\\"submitTime\\":{\\"type\\":\\"string\\",\\"description\\":\\"提交时间\\"},\\"submitUserId\\":{\\"type\\":\\"string\\",\\"description\\":\\"提交人ID\\"},\\"reviewType\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核类型 1视频 2课件\\"},\\"reviewMethod\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核方式 1人工审核 2系统审核\\"},\\"reviewTime\\":{\\"type\\":\\"string\\",\\"description\\":\\"审核时间\\"},\\"reviewUserId\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核人ID\\"},\\"reviewUserName\\":{\\"type\\":\\"string\\",\\"description\\":\\"审核人名称\\"},\\"reviewStatus\\":{\\"type\\":\\"integer\\",\\"description\\":\\"审核状态\\"},\\"reviewRemark\\":{\\"type\\":\\"string\\",\\"description\\":\\"失败原因\\"}}},\\"description\\":\\"课件审核记录\\"},\\"isCanReject\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"是否可以驳回\\",\\"default\\":\\"false\\"},\\"challengeBaseInfo\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"challengeId\\":{\\"type\\":\\"string\\"},\\"orgId\\":{\\"type\\":\\"string\\"},\\"fullOrgName\\":{\\"type\\":\\"string\\"},\\"title\\":{\\"type\\":\\"string\\"},\\"desc\\":{\\"type\\":\\"string\\"},\\"cover\\":{\\"type\\":\\"string\\"},\\"coverImg\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"imageName\\":{\\"type\\":\\"string\\"},\\"normal\\":{\\"type\\":\\"string\\"},\\"middle\\":{\\"type\\":\\"string\\"},\\"small\\":{\\"type\\":\\"string\\"},\\"gif\\":{\\"type\\":\\"string\\"},\\"nologo\\":{\\"type\\":\\"string\\"}}},\\"tagId\\":{\\"type\\":\\"string\\"},\\"tagName\\":{\\"type\\":\\"string\\"},\\"strategyId\\":{\\"type\\":\\"string\\"},\\"strategyName\\":{\\"type\\":\\"string\\"},\\"startAt\\":{\\"type\\":\\"string\\"},\\"endAt\\":{\\"type\\":\\"string\\"},\\"startAtDate\\":{\\"type\\":\\"string\\",\\"mock\\":{\\"mock\\":\\"@datetime\\"}},\\"endAtDate\\":{\\"type\\":\\"string\\",\\"mock\\":{\\"mock\\":\\"@datetime\\"}},\\"challengeStatus\\":{\\"type\\":\\"integer\\"},\\"challengeStatusDesc\\":{\\"type\\":\\"string\\"},\\"isSubmitted\\":{\\"type\\":\\"boolean\\"},\\"isApplied\\":{\\"type\\":\\"boolean\\"},\\"minVideoTime\\":{\\"type\\":\\"integer\\"},\\"videoTimeConfig\\":{\\"type\\":\\"string\\"},\\"videoTimeConfigs\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"requirements\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"failReason\\":{\\"type\\":\\"string\\"}},\\"description\\":\\"播客活动基础信息，只有播客场景有此对象\\"},\\"liveReexamineRecordList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"liveReviewRecordId\\":{\\"type\\":\\"string\\",\\"description\\":\\"复审记录Id\\"},\\"liveSpeakerId\\":{\\"type\\":\\"string\\",\\"description\\":\\"直播讲者审核id\\"},\\"taskName\\":{\\"type\\":\\"string\\",\\"description\\":\\"任务标题\\"},\\"deadlineDate\\":{\\"type\\":\\"string\\",\\"description\\":\\"任务复审截止时间\\"},\\"reviewUserId\\":{\\"type\\":\\"string\\",\\"description\\":\\"复审人员id\\"},\\"reviewUserName\\":{\\"type\\":\\"string\\",\\"description\\":\\"复审人员\\"},\\"status\\":{\\"type\\":\\"integer\\",\\"description\\":\\"复审状态 1审核中（进行中） 2成功（一致） 3失败（不一致）\\"},\\"tagList\\":{\\"type\\":\\"string\\",\\"description\\":\\"标签列表\\"},\\"createdAt\\":{\\"type\\":\\"string\\",\\"description\\":\\"创建时间\\"},\\"remark\\":{\\"type\\":\\"string\\",\\"description\\":\\"备注\\"}}},\\"description\\":\\"复审记录列表\\"},\\"similarVideoResultVOList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"videoId\\":{\\"type\\":\\"string\\"},\\"score\\":{\\"type\\":\\"number\\"},\\"similarKeyframeCompareVOList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"originalSplitIndex\\":{\\"type\\":\\"integer\\"},\\"similarSplitIndex\\":{\\"type\\":\\"integer\\"},\\"similarKeyFrameUrl\\":{\\"type\\":\\"string\\"},\\"score\\":{\\"type\\":\\"number\\"}}}},\\"originalKeyframeResultVOList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"splitIndex\\":{\\"type\\":\\"integer\\"},\\"keyFrameUrl\\":{\\"type\\":\\"string\\"}}}},\\"similarKeyframeResultVOList\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"splitIndex\\":{\\"type\\":\\"integer\\"},\\"keyFrameUrl\\":{\\"type\\":\\"string\\"}}}}}},\\"description\\":\\"视频相似结果\\"},\\"liveCourseware\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"coursewareId\\":{\\"type\\":\\"string\\"},\\"coursewareName\\":{\\"type\\":\\"string\\"},\\"coursewareUrl\\":{\\"type\\":\\"string\\"}},\\"description\\":\\"课件信息\\"}}}},\\"required\\":[\\"code\\",\\"message\\",\\"data\\"],\\"$schema\\":\\"http://json-schema.org/draft-04/schema#\\",\\"description\\":\\"\\"}","method":"GET","res_body_type":"json","title":"获取审核详情","path":"/workbeanches/live-review/review-detail","catid":3490,"markdown":"","req_headers":[],"req_query":[{"required":"1","_id":"6777ac0a39c8e30c50e4f4ed","name":"id","value":"","desc":"liveSpeakerId"}],"desc":"<p></p>","project_id":97,"req_params":[],"uid":81,"add_time":1691117314,"up_time":1735896074,"req_body_form":[],"__v":0,"username":"木豆"}}'),h={class:"type-definition-container"},f={class:"type-definition pre",contenteditable:""},b=o(e({__name:"generateApitypes",setup(e){const o=t(m),y=t("Demo"),c=r((()=>{var e,t;try{const{req_query:r=[],req_body_other:n="{}",res_body:i="{}"}=o.value.data||{},s=Array.isArray(r)&&r.length>0,p=n&&"{}"!==n;let a="";if(s&&p)a=`request: {\n        params: {\n          ${d(r,2)}\n        },\n        body: ${l(n,2)}\n      }`;else if(s)a=`request: {\n        ${d(r,1)}\n      }`;else if(p){const e=JSON.parse(n)||{};a=`request: ${l(e,1)}`}else a="request: Record<string, never>";const c=(null==(t=null==(e=JSON.parse(i))?void 0:e.properties)?void 0:t.data)||{},u=`interface ${y.value.trim()||"DefaultType"} {\n      ${a}\n      response: ${l(c,1)}\n    }`;return g(u)}catch(r){return console.error("生成类型定义时出错:",r),"类型生成失败，请检查输入数据格式"}})),d=(e=[],t=1)=>{try{let r="";const n="  ".repeat(t);return e.forEach((e=>{if(!(null==e?void 0:e.name))return;const t="1"===e.required,i=e.name.trim(),s=u(e.type),p=e.desc?`${n}// ${e.desc.trim()}\n`:"";r+=`${p}${n}${i}${t?"":"?"}: ${s};\n`})),r.trim()}catch(r){return console.error("生成请求类型时出错:",r),"/* 类型生成失败 */"}},l=(e,t=1)=>{try{let r=function(e){if(!e.type)return"any";switch(e.type){case"string":return"string";case"number":case"integer":return"number";case"boolean":return"boolean";case"array":return e.items?`${r(e.items)}[]`:"any[]";case"object":if(e.properties){let t="{\n";for(const[i,s]of Object.entries(e.properties)){const e=s;t+=`${e.description?`${n}  // ${e.description}\n`:""}${n}    ${i}${e.required?"":"?"}: ${r(e)}\n`}return t+=`${n}  }`,t}return"Record<string, any>";default:return"any"}};if(e.type&&!e.properties)return r(e);const n="  ".repeat(t);let i="{\n";if(e.properties)for(const[t,s]of Object.entries(e.properties)){if(!t||!s)continue;const p=Array.isArray(e.required)&&e.required.includes(t);i+=`${s.description?`${n}  // ${s.description.trim()}\n`:""}${n}  ${t}${p?"":"?"}: ${r(s)}\n`}return i+="}",i}catch(r){return console.error("生成响应类型时出错:",r),"{ /* 类型生成失败 */ }"}},g=e=>{let t=0;return e.split("\n").map((e=>{e.includes("}")&&t--;const r=e.trim()?"  ".repeat(t)+e.trim():"";return e.includes("{")&&t++,r})).filter(Boolean).join("\n")},u=(e="")=>{switch(e.toLowerCase()){case"string":return"string";case"number":case"integer":return"number";case"boolean":return"boolean";default:return"any"}},b=e=>{try{const t=e.target.innerText.trim();if(!t)return;o.value=JSON.parse(t)}catch(t){console.error("JSON 解析失败:",t)}};return(e,t)=>(n(),i("div",h,[t[0]||(t[0]=s(" YAPI 接口返回数据（接口返回值粘贴到下方）： ")),p("pre",{contenteditable:"",onInput:b,class:"pre json-input",rows:10,placeholder:"请输入 JSON 字符串"},a(JSON.stringify(o.value,null,2)),33),t[1]||(t[1]=s(" 转换后TS类型： ")),p("pre",f,a(c.value),1)]))}}),[["__scopeId","data-v-b952ac92"]]),v=JSON.parse('{"title":"生成 API ts 类型","description":"","frontmatter":{},"headers":[],"relativePath":"src/utils/generateApitypes.md","filePath":"src/utils/generateApitypes.md","lastUpdated":1736158905000}'),q={name:"src/utils/generateApitypes.md"},S=Object.assign(q,{setup:e=>(e,t)=>{const r=g("ClientOnly");return n(),i("div",null,[t[0]||(t[0]=y('<h1 id="生成-api-ts-类型" tabindex="-1">生成 API ts 类型 <a class="header-anchor" href="#生成-api-ts-类型" aria-label="Permalink to &quot;生成 API ts 类型&quot;">​</a></h1><h2 id="根据接口返回数据生成-ts-类型" tabindex="-1">根据接口返回数据生成 TS 类型 <a class="header-anchor" href="#根据接口返回数据生成-ts-类型" aria-label="Permalink to &quot;根据接口返回数据生成 TS 类型&quot;">​</a></h2><h3 id="获取接口返回数据步骤" tabindex="-1">获取接口返回数据步骤： <a class="header-anchor" href="#获取接口返回数据步骤" aria-label="Permalink to &quot;获取接口返回数据步骤：&quot;">​</a></h3><ol><li>登录 <a href="https://yapi.yaomaitong.net/" target="_blank" rel="noreferrer">YAPI</a> 平台</li><li>找到需要生成类型的接口 （ <a href="https://yapi.yaomaitong.net/api/interface/get?id=" target="_blank" rel="noreferrer">https://yapi.yaomaitong.net/api/interface/get?id=</a> ）</li><li>点击&quot;预览&quot;标签页</li><li>在右侧找到&quot;返回数据示例&quot;</li><li>点击示例数据右上角的&quot;复制&quot;按钮</li><li>将复制的 JSON 数据粘贴到下方示例工具中</li></ol><p>注意事项：</p><ul><li>确保返回的示例数据完整且格式正确</li><li>如果接口返回数据结构较复杂，建议先检查数据示例是否包含所有可能的字段</li></ul>',6)),c(r,null,{default:d((()=>[c(l(u),{title:"基础用法",description:"根据 YAPI 生成 API ts 类型",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,vueCode:l("<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport resJson from './api-res.json'\n\ninterface JsonSchemaProperty {\n  type?: string;\n  description?: string;\n  required?: boolean;\n  items?: JsonSchemaProperty;\n  properties?: Record<string, JsonSchemaProperty>;\n}\n\nconst jsonSchemaStr = ref(resJson)\nconst apiTypesName = ref('Demo')\n\n\nconst jsonSchemaObj = computed(() => {\n  try {\n    const { req_query = [], req_body_other = '{}', res_body = '{}' } = jsonSchemaStr.value.data || {}\n    const hasReqQuery = Array.isArray(req_query) && req_query.length > 0\n    const hasReqBody = req_body_other && req_body_other !== '{}'\n\n    // 构建请求类型\n    let requestTypes = ''\n    if (hasReqQuery && hasReqBody) {\n      requestTypes = `request: {\n        params: {\n          ${generateApiArrayTypes(req_query, 2)}\n        },\n        body: ${generateApiJsonSchemaTypes(req_body_other, 2)}\n      }`\n    } else if (hasReqQuery) {\n      requestTypes = `request: {\n        ${generateApiArrayTypes(req_query, 1)}\n      }`\n    } else if (hasReqBody) {\n      const jsonSchema = JSON.parse(req_body_other) || {}\n      requestTypes = `request: ${generateApiJsonSchemaTypes(jsonSchema, 1)}`\n    } else {\n      requestTypes = 'request: Record<string, never>'\n    }\n\n    const jsonSchema = JSON.parse(res_body)?.properties?.data || {}\n    const typeDefinition = `interface ${apiTypesName.value.trim() || 'DefaultType'} {\n      ${requestTypes}\n      response: ${generateApiJsonSchemaTypes(jsonSchema, 1)}\n    }`\n    return formatTypeDefinition(typeDefinition)\n  } catch (error) {\n    console.error('生成类型定义时出错:', error)\n    return '类型生成失败，请检查输入数据格式'\n  }\n})\n\n// 修改 generateApiArrayTypes 函数，添加缩进级别参数\nconst generateApiArrayTypes = (reqArray: any[] = [], indentLevel: number = 1) => {\n  try {\n    let result = ''\n    const indent = '  '.repeat(indentLevel)\n\n    reqArray.forEach((param: any) => {\n      if (!param?.name) return\n\n      const required = param.required === \"1\"\n      const name = param.name.trim()\n      const type = getParameterType(param.type)\n      const desc = param.desc ? `${indent}// ${param.desc.trim()}\\n` : \"\"\n\n      result += `${desc}${indent}${name}${required ? \"\" : \"?\"}: ${type};\\n`\n    })\n\n    return result.trim()\n  } catch (error) {\n    console.error('生成请求类型时出错:', error)\n    return '/* 类型生成失败 */'\n  }\n}\n\n// 修改 generateApiJsonSchemaTypes 函数，添加缩进级别参数\nconst generateApiJsonSchemaTypes = (jsonSchema: any, indentLevel: number = 1) => {\n  try {\n    // 如果 jsonSchema 直接是类型定义\n    if (jsonSchema.type && !jsonSchema.properties) {\n      return getPropertyType(jsonSchema)\n    }\n\n    const indent = '  '.repeat(indentLevel)\n    let result = '{\\n'\n\n    // 获取属性的类型\n    function getPropertyType (prop: any): string {\n      if (!prop.type) return 'any'\n\n      switch (prop.type) {\n        case 'string':\n          return 'string'\n        case 'number':\n        case 'integer':\n          return 'number'\n        case 'boolean':\n          return 'boolean'\n        case 'array':\n          if (prop.items) {\n            return `${getPropertyType(prop.items)}[]`\n          }\n          return 'any[]'\n        case 'object':\n          if (prop.properties) {\n            let nestedInterface = '{\\n'\n            for (const [key, value] of Object.entries(prop.properties)) {\n              const typedValue = value as JsonSchemaProperty\n              const desc = typedValue.description ? `${indent}  // ${typedValue.description}\\n` : ''\n              nestedInterface += `${desc}${indent}    ${key}${typedValue.required ? '' : '?'}: ${getPropertyType(typedValue)}\\n`\n            }\n            nestedInterface += `${indent}  }`\n            return nestedInterface\n          }\n          return 'Record<string, any>'\n        default:\n          return 'any'\n      }\n    }\n\n    // 处理属性\n    if (jsonSchema.properties) {\n      for (const [key, value] of Object.entries(jsonSchema.properties)) {\n        if (!key || !value) continue // 跳过无效属性\n\n        const required = Array.isArray(jsonSchema.required) && jsonSchema.required.includes(key)\n        const desc = (value as any).description ? `${indent}  // ${(value as any).description.trim()}\\n` : ''\n        result += `${desc}${indent}  ${key}${required ? '' : '?'}: ${getPropertyType(value as any)}\\n`\n      }\n    }\n\n    result += '}'\n    return result\n  } catch (error) {\n    console.error('生成响应类型时出错:', error)\n    return '{ /* 类型生成失败 */ }'\n  }\n}\n\nconst formatTypeDefinition = (typeStr: string): string => {\n  let indentLevel = 0\n  const lines = typeStr.split('\\n')\n\n  return lines\n    .map(line => {\n      // 处理缩进\n      if (line.includes('}')) indentLevel--\n      const formatted = line.trim() ? '  '.repeat(indentLevel) + line.trim() : ''\n      if (line.includes('{')) indentLevel++\n      return formatted\n    })\n    .filter(Boolean) // 移除空行\n    .join('\\n')\n}\n\n// 新增参数类型判断函数\nconst getParameterType = (type: string = ''): string => {\n  switch (type.toLowerCase()) {\n    case 'string':\n      return 'string'\n    case 'number':\n    case 'integer':\n      return 'number'\n    case 'boolean':\n      return 'boolean'\n    default:\n      return 'any'\n  }\n}\n\nconst handleInput = (e: any) => {\n  try {\n    const text = e.target.innerText.trim()\n    if (!text) return\n    jsonSchemaStr.value = JSON.parse(text)\n  } catch (error) {\n    console.error('JSON 解析失败:', error)\n    // 可以添加用户提示\n  }\n}\n<\/script>\n\n<template>\n  <div class=\"type-definition-container\">\n    YAPI 接口返回数据（接口返回值粘贴到下方）：\n    <pre contenteditable @input=\"handleInput\" class=\"pre json-input\" :rows=\"10\"\n         placeholder=\"请输入 JSON 字符串\">{{ JSON.stringify(jsonSchemaStr, null, 2) }}</pre>\n\n    转换后TS类型：\n\n    <pre class=\"type-definition pre\" contenteditable>{{ jsonSchemaObj }}</pre>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.type-definition-container {\n  position: relative;\n\n  .pre {\n    height: 300px;\n    border-radius: 4px;\n    padding: 16px;\n    background: #f5f7fa;\n    overflow: auto;\n    max-height: fit-content; // 最大高度为内容高度\n    resize: vertical; // 添加垂直方向的拖拽缩放\n  }\n\n  .type-definition {\n    margin-top: 16px;\n    position: relative;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace;\n    font-size: 14px;\n    line-height: 1.5;\n    white-space: pre-wrap;\n    word-break: break-all;\n    color: #2c3e50;\n\n    .copy-button {\n      position: absolute;\n      right: 10px;\n      top: 10px;\n      z-index: 1;\n    }\n  }\n}\n</style>\n")},{vue:d((()=>[c(b)])),_:1},8,["vueCode"])])),_:1})])}});export{v as __pageData,S as default};
